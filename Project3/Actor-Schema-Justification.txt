Actor Schema: 

	Every actor can star in many films and each film has many actors. A film generally has more than a few actors in it, but not a zillion. So a film has many actors. Some actors are only in a few films and they are never in a zillion films. I will stick with saying that actors are a part of many films as they generally are and can be over time. Because it is ‘many’, this means there would be too much space taken up if we want to embed all the actor information inside of films.
Instead, I plan on having my film's schema include an actors list that includes their first and last names as well as their IDs so that a person can search for actors within a film. This causes redundancy but also reduces the need for joins, so that a join would only be required if a user wanted more information on a specific actor. We considered including the IMDB URL under the films schema, but believe that would be something that would be better found inside the actors collection. We understand that this URL would be nice to have inside of the films information directly, but it then raises the concern of the relevance of the actor schema itself. Having the IMDB link embedded in our films page would make our actor page obsolete since their IMDB page would have all of our information and more, so having just these few details would suffice. Also due to document databases having a max size of 16MB, we think that adding more information about the actors in the films collection would best be avoided. If a user wanted more information on an actor, they could go directly to the actor’s page, where the IMDB link will also be provided if our provided information is not sufficient. 
The separate actor schema will contain all the extra information specified in the project 3 outline. For the cases in which people remember an actor that is starring in a new film but cannot remember the name of the film, I can see how they would want to search for that actor and find that film. This would make me think that adding a list of films in the actor's schema may be helpful to not have to require a join. BUT, I am not sure that this case happens frequently enough to need this redundancy, and whether people would just use google or other sources to find this information instead of our specific movie theater chain enterprise. Furthermore, if the user wanted to find all the movies an actor is in, they can do this by visiting the IMDB URL instead of using our enterprise. This is why I plan to have the actor schema only have its own specified information, and would say that a join from actors to films can occur for those cases where people want to find an actor in a new film they want to watch. We decided to not include film information inside of the actor's schema because this added redundancy isn't needed for a rare case that's not suited for our enterprise whose focus is on selling tickets. Before a user lands on our theater webpage, preliminary steps such as researching a specific actor or their films would have already taken place, and our enterprise focuses solely on theater showings and tickets.
